class Node:
  def __init__(self, data):
    self.data = data
    self.nextNode = None
class LinkedList:
  def __init__(self):
    self.head = None
    self.tail = None
  def printLL(self):
    pos = 0
    curNode = self.head
    result = "LL: ["
    while curNode != None:
      pos +=1
      if pos ==1:
        result += ' ' + str(curNode.data)
      else:
        result += " -> "+ str(curNode.data)
      curNode = curNode.nextNode
    result+= ' ] '
    print(result)
  def add(self,data):
    node = Node(data)
    if self.head == None:
      self.head = node
      self.tail = node
    else:
      self.tail.nextNode = node
      self.tail = node
  def insert(self, pos, data):
    node = Node (data)
    prevNode = None
    curNode = self.head
    i = 0
    while i < pos and curNode != None:
      i += 1
      prevNode = curNode
      curNode = curNode.nextNode
    if prevNode ==None:
      #add on the head of LL
      node.nextNode = self.head
      self.head = node
      if self.tail == None:
        self.tail = node
    else:
      if curNode == None:
        #add on the tail of LL
        self.tail.nextNode = node
        self.tail = node
      else:
        #add on the middle of LL
        prevNode.nextNode =node
        node.nextNode =curNode
  def find(self,data):
    pos = 0
    curNode = self.head
    prevNode = None
    while curNode !=None and curNode.data != data:
      pos +=1
      curNode = curNode.nextNode
    if curNode == None:
      return None
    else:
      return pos
  def delete (self,data):
    curNode = self.head
    while curNode !=None and curNode.data !=data:
      prevNode = curNode
      curNode = curNode.nextNode
    if curNode != None:
      if curNode == self.head and curNode == self.tail:
        #Detele the LL has only 1 data
        self.head = None
        self.tail = None
      elif curNode == self.head:
        #Delete the first data of LL and not atleast data
        self.head = self.head.nextNode
      elif curNode == self.tail:
        #Delete the last data of LL and not atleast data
        prevNode.nextNode = None
        self.tail = prevNode
      else:
        prevNode.nextNode = curNode.nextNode
      del curNode
      
  def update(self, pos, data):
    curNode = self.head
    i = 0
    while i<pos and curNode !=None:
      i+=1
      curNode = curNode.nextNode
    if curNode !=None:
      curNode.data = data
  def deleteAll(self):
    curNode = self.head
    self.head = self.tail = None
    while curNode !=None:
      temp = curNode
      curNode = curNode.nextNode
      del temp
    
        
    
ll=LinkedList()
ll.add(3)
ll.printLL()  
ll.add(5)
ll.printLL() 
ll.add(7)
ll.printLL() 
ll.insert(3,4)
ll.printLL()
print(ll.find(3))
ll.delete(3)
ll.printLL()
ll.delete(0)
ll.printLL()
ll.update(0,4)
ll.printLL()
ll.deleteAll()
ll.printLL()
